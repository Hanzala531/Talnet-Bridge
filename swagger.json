{
  "openapi": "3.0.0",
  "info": {
    "title": "Talent Bridge API",
    "version": "1.0.0",
    "description": "API documentation for the Talent Bridge platform",
    "contact": {
      "name": "Talent Bridge Team",
      "email": "support@talentbridge.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User authentication and management endpoints"
    },
    {
      "name": "Courses",
      "description": "Course management and search endpoints"
    },
    {
      "name": "Training Providers",
      "description": "Training provider/school management endpoints"
    },
    {
      "name": "Employers",
      "description": "Employer company profile management endpoints"
    },
    {
      "name": "Jobs",
      "description": "Job posting and management endpoints"
    },
    {
      "name": "Students",
      "description": "Student profile management endpoints"
    },
    {
      "name": "KYC",
      "description": "Know Your Customer document verification endpoints"
    },
    {
      "name": "Certifications",
      "description": "Certification management and search endpoints"
    },
    {
      "name": "Experiences",
      "description": "Work experience management endpoints"
    },
    {
      "name": "Enrollments",
      "description": "Course enrollment management and tracking endpoints"
    },
    {
      "name": "Subscription Plans",
      "description": "Subscription plan management endpoints"
    },
    {
      "name": "Subscriptions",
      "description": "User subscription management endpoints"
    },
    {
      "name": "Payments",
      "description": "Payment processing endpoints"
    },
    {
      "name": "Webhooks",
      "description": "Webhook handling endpoints"
    },
    {
      "name": "Notifications",
      "description": "User notification management endpoints"
    },
    {
      "name": "Chat",
      "description": "Real-time chat and messaging endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login endpoint"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User unique identifier",
            "example": "64f123abc456def789012345"
          },
          "fullName": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "john@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "03001234567"
          },
          "role": {
            "type": "string",
            "enum": [
              "student",
              "school",
              "employer",
              "admin"
            ],
            "description": "User role in the platform",
            "example": "student"
          },
          "onboardingStage": {
            "type": "string",
            "enum": [
              "basic_info",
              "profile_setup",
              "verification",
              "completed"
            ],
            "description": "Current onboarding stage",
            "example": "basic_info"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended",
              "pending"
            ],
            "description": "User account status",
            "example": "active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          }
        }
      },
      "Course": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Course unique identifier",
            "example": "64f456def789abc123456789"
          },
          "title": {
            "type": "string",
            "description": "Course title",
            "example": "Web Development Fundamentals"
          },
          "instructor": {
            "type": "string",
            "description": "Instructor name",
            "example": "John Doe"
          },
          "duration": {
            "type": "string",
            "description": "Course duration",
            "example": "8 weeks"
          },
          "price": {
            "type": "number",
            "description": "Course price in PKR",
            "example": 299.99
          },
          "language": {
            "type": "string",
            "description": "Course language",
            "example": "English"
          },
          "type": {
            "type": "string",
            "enum": [
              "online",
              "offline",
              "hybrid"
            ],
            "description": "Course delivery type",
            "example": "online"
          },
          "description": {
            "type": "string",
            "description": "Course description",
            "example": "Learn the fundamentals of web development including HTML, CSS, and JavaScript"
          },
          "objectives": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Course learning objectives",
            "example": [
              "Learn HTML structure and semantics",
              "Master CSS styling and layouts",
              "Understand JavaScript fundamentals"
            ]
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Skills gained from this course",
            "example": [
              "Frontend Development",
              "Responsive Design",
              "JavaScript Programming"
            ]
          },
          "category": {
            "type": "string",
            "description": "Course category",
            "example": "Technology"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "pending_approval",
              "approved",
              "rejected",
              "archived"
            ],
            "description": "Course approval status",
            "example": "approved"
          },
          "providerId": {
            "type": "string",
            "description": "Training provider (school) ID",
            "example": "64f789abc123def456789012"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Course creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Course last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64f789abc123def456789012"
          },
          "jobTitle": {
            "type": "string",
            "example": "Software Engineer"
          },
          "department": {
            "type": "string",
            "example": "Engineering"
          },
          "location": {
            "type": "string",
            "example": "Lahore"
          },
          "employmentType": {
            "type": "string",
            "enum": [
              "Full-time",
              "Part-time",
              "Internship",
              "Contract"
            ],
            "example": "Full-time"
          },
          "salary": {
            "type": "object",
            "properties": {
              "min": {
                "type": "number",
                "example": 50000
              },
              "max": {
                "type": "number",
                "example": 100000
              },
              "currency": {
                "type": "string",
                "example": "PKR"
              }
            }
          },
          "jobDescription": {
            "type": "string",
            "example": "Develop and maintain web applications."
          },
          "skillsRequired": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "skill": {
                  "type": "string",
                  "example": "JavaScript"
                },
                "proficiency": {
                  "type": "string",
                  "enum": [
                    "Beginner",
                    "Intermediate",
                    "Advanced"
                  ],
                  "example": "Intermediate"
                }
              }
            }
          },
          "benefits": {
            "type": "string",
            "example": "Health insurance, Flexible hours"
          },
          "category": {
            "type": "string",
            "example": "Technology"
          },
          "applicationDeadline": {
            "type": "string",
            "format": "date",
            "example": "2025-12-31"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "closed",
              "expired"
            ],
            "example": "active"
          },
          "companyId": {
            "type": "string",
            "description": "Employer company ID",
            "example": "64f890abc123def456789013"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Job creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Job last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          }
        }
      },
      "Student": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Student unique identifier",
            "example": "60f0f4f4f4f4f4f4f4f4f4f4"
          },
          "userId": {
            "type": "object",
            "description": "Associated user ID",
            "example": "64f123abc456def789012345",
            "properties": {
              "_id": {
                "type": "string"
              },
              "fullName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "Student date of birth",
            "example": "1998-05-15"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "description": "Student gender",
            "example": "male"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "123 Main Street"
              },
              "city": {
                "type": "string",
                "example": "Lahore"
              },
              "state": {
                "type": "string",
                "example": "Punjab"
              },
              "country": {
                "type": "string",
                "example": "Pakistan"
              },
              "postalCode": {
                "type": "string",
                "example": "54000"
              }
            }
          },
          "education": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "institution": {
                  "type": "string",
                  "example": "University of Punjab"
                },
                "degree": {
                  "type": "string",
                  "example": "Bachelor of Science in Computer Science"
                },
                "fieldOfStudy": {
                  "type": "string",
                  "example": "Computer Science"
                },
                "startDate": {
                  "type": "string",
                  "format": "date",
                  "example": "2016-09-01"
                },
                "endDate": {
                  "type": "string",
                  "format": "date",
                  "example": "2020-06-30"
                },
                "grade": {
                  "type": "string",
                  "example": "3.8 GPA"
                }
              }
            }
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Student skills",
            "example": [
              "JavaScript",
              "React",
              "Node.js",
              "MongoDB"
            ]
          },
          "profileStatus": {
            "type": "string",
            "enum": [
              "incomplete",
              "complete",
              "verified"
            ],
            "description": "Profile completion status",
            "example": "complete"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          },
          "bio": {
            "type": "string",
            "example": "Passionate about technology and learning"
          },
          "location": {
            "type": "string",
            "example": "Lahore, Pakistan"
          },
          "website": {
            "type": "string",
            "example": "https://myportfolio.com"
          },
          "certifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "experience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gsceResult": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GSCEResult"
            }
          }
        }
      },
      "Employer": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Employer unique identifier",
            "example": "64f890abc123def456789013"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "64f890abc123def456789013"
          },
          "companyName": {
            "type": "string",
            "description": "Company name",
            "example": "TechCorp Solutions"
          },
          "companyDescription": {
            "type": "string",
            "description": "Company description",
            "example": "Leading software development company specializing in web and mobile applications"
          },
          "industry": {
            "type": "string",
            "description": "Company industry",
            "example": "Information Technology"
          },
          "companySize": {
            "type": "string",
            "enum": [
              "1-10",
              "11-50",
              "51-200",
              "201-500",
              "501-1000",
              "1000+"
            ],
            "description": "Company size range",
            "example": "51-200"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "Company website URL",
            "example": "https://techcorp.com"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "456 Business Avenue"
              },
              "city": {
                "type": "string",
                "example": "Karachi"
              },
              "state": {
                "type": "string",
                "example": "Sindh"
              },
              "country": {
                "type": "string",
                "example": "Pakistan"
              },
              "postalCode": {
                "type": "string",
                "example": "75600"
              }
            }
          },
          "establishedYear": {
            "type": "integer",
            "description": "Year company was established",
            "example": 2015
          },
          "verificationStatus": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "rejected"
            ],
            "description": "Company verification status",
            "example": "verified"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          }
        }
      },
      "School": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "School unique identifier",
            "example": "64f789abc123def456789012"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "64f789abc123def456789012"
          },
          "institutionName": {
            "type": "string",
            "description": "Institution name",
            "example": "TechEd Academy"
          },
          "institutionType": {
            "type": "string",
            "enum": [
              "university",
              "college",
              "training_institute",
              "certification_body"
            ],
            "description": "Type of educational institution",
            "example": "training_institute"
          },
          "description": {
            "type": "string",
            "description": "Institution description",
            "example": "Premier technology training institute offering industry-relevant courses"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "789 Education Street"
              },
              "city": {
                "type": "string",
                "example": "Islamabad"
              },
              "state": {
                "type": "string",
                "example": "Federal"
              },
              "country": {
                "type": "string",
                "example": "Pakistan"
              },
              "postalCode": {
                "type": "string",
                "example": "44000"
              }
            }
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "Institution website URL",
            "example": "https://techedacademy.edu.pk"
          },
          "accreditation": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Institution accreditations",
            "example": [
              "HEC Recognized",
              "ISO 9001:2015 Certified"
            ]
          },
          "establishedYear": {
            "type": "integer",
            "description": "Year institution was established",
            "example": 2010
          },
          "verificationStatus": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "rejected"
            ],
            "description": "Institution verification status",
            "example": "verified"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile creation timestamp",
            "example": "2025-08-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile last update timestamp",
            "example": "2025-08-19T14:20:00.000Z"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the operation was successful",
            "example": true
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Response data (varies by endpoint)"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Operation completed successfully"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Always false for error responses",
            "example": false
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP error status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Validation error or operation failed"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Detailed error messages (optional)",
            "example": [
              "Email is required",
              "Password must be at least 6 characters"
            ]
          }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Current page limit",
            "example": 20
          },
          "total": {
            "type": "integer",
            "description": "Total number of items",
            "example": 150
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "example": 8
          },
          "hasMore": {
            "type": "boolean",
            "description": "Whether there are more results available"
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor for the next page"
          }
        }
      },
      "Certification": {
        "type": "object",
        "required": [
          "name",
          "issuedBy"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "60f0f4f4f4f4f4f4f4f4f4f4"
          },
          "name": {
            "type": "string",
            "example": "AWS Certified Solutions Architect"
          },
          "issuedBy": {
            "type": "string",
            "example": "Amazon Web Services"
          },
          "issueDate": {
            "type": "string",
            "format": "date",
            "example": "2023-06-15"
          },
          "certificateFile": {
            "type": "string",
            "example": "https://cloudinary.com/certificate.pdf"
          },
          "extracted": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Experience": {
        "type": "object",
        "required": [
          "title",
          "company",
          "startDate"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "60f0f4f4f4f4f4f4f4f4f4f4"
          },
          "title": {
            "type": "string",
            "example": "Software Engineer"
          },
          "company": {
            "type": "string",
            "example": "Google"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-15"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2023-06-30"
          },
          "description": {
            "type": "string",
            "example": "Developed web applications using React and Node.js"
          },
          "isCurrentJob": {
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "duration": {
            "type": "string",
            "readOnly": true,
            "example": "1 year 5 months"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "KYCDocument": {
        "type": "object",
        "required": [
          "docType",
          "docUrl"
        ],
        "properties": {
          "docType": {
            "type": "string",
            "enum": [
              "CNIC",
              "studentId",
              "transcript",
              "degree",
              "other"
            ],
            "example": "CNIC"
          },
          "docUrl": {
            "type": "string",
            "example": "https://cloudinary.com/image.jpg"
          }
        }
      },
      "KYC": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60f0f4f4f4f4f4f4f4f4f4f4"
          },
          "userId": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "fullName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KYCDocument"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "rejected"
            ],
            "example": "pending"
          },
          "verifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "verifiedBy": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "fullName": {
                "type": "string"
              }
            }
          },
          "rejectionReason": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64f123abc456def789012345"
          },
          "title": {
            "type": "string",
            "example": "Course Enrollment Confirmed"
          },
          "message": {
            "type": "string",
            "example": "You have successfully enrolled in JavaScript Fundamentals"
          },
          "type": {
            "type": "string",
            "enum": [
              "course_enrollment",
              "course_completion",
              "certificate_issued",
              "payment_received",
              "payment_failed",
              "job_application",
              "interview_scheduled",
              "profile_verified",
              "message_received",
              "system_update",
              "security_alert",
              "subscription_expiry"
            ],
            "example": "course_enrollment"
          },
          "isRead": {
            "type": "boolean",
            "example": false
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high",
              "urgent"
            ],
            "example": "normal"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-19T10:30:00.000Z"
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-19T11:00:00.000Z"
          },
          "relatedEntity": {
            "type": "object",
            "properties": {
              "entityType": {
                "type": "string",
                "enum": [
                  "course",
                  "job",
                  "application",
                  "payment",
                  "user",
                  "message"
                ],
                "example": "course"
              },
              "entityId": {
                "type": "string",
                "example": "64f456def789abc123456789"
              }
            }
          }
        }
      },
      "NotificationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "statusCode": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "properties": {
              "notifications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Notification"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "integer",
                    "example": 1
                  },
                  "limit": {
                    "type": "integer",
                    "example": 10
                  },
                  "total": {
                    "type": "integer",
                    "example": 25
                  },
                  "pages": {
                    "type": "integer",
                    "example": 3
                  }
                }
              },
              "summary": {
                "type": "object",
                "properties": {
                  "unreadCount": {
                    "type": "integer",
                    "example": 5
                  },
                  "totalCount": {
                    "type": "integer",
                    "example": 25
                  }
                }
              }
            }
          },
          "message": {
            "type": "string",
            "example": "Notifications retrieved successfully"
          }
        }
      },
      "GSCEResult": {
        "type": "object",
        "required": [
          "subject",
          "grade"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "example": "Mathematics"
          },
          "grade": {
            "type": "string",
            "example": "A*"
          }
        }
      },
      "ChatConversation": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Conversation ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "dm",
              "group"
            ],
            "description": "Type of conversation"
          },
          "name": {
            "type": "string",
            "description": "Conversation name (for groups)"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/components/schemas/UserBasic"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "admin",
                    "student",
                    "school",
                    "employer"
                  ]
                }
              }
            }
          },
          "lastMessage": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "unreadCount": {
            "type": "integer",
            "description": "Number of unread messages for the current user"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatConversationPreview": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dm",
              "group"
            ]
          },
          "name": {
            "type": "string"
          },
          "participantUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic"
            }
          },
          "lastMessage": {
            "$ref": "#/components/schemas/ChatMessageBasic"
          },
          "unreadCount": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "student",
              "school",
              "employer"
            ]
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Message ID"
          },
          "conversationId": {
            "type": "string",
            "description": "ID of the conversation this message belongs to"
          },
          "sender": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "text": {
            "type": "string",
            "description": "Message text content"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatAttachment"
            }
          },
          "readBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs who have read this message"
          },
          "edited": {
            "type": "boolean",
            "description": "Whether the message has been edited"
          },
          "editedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was last edited"
          },
          "replyTo": {
            "$ref": "#/components/schemas/ChatMessageBasic"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "media",
              "mixed"
            ],
            "description": "Type of message based on content"
          },
          "hasAttachments": {
            "type": "boolean",
            "description": "Whether message has attachments"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatMessageBasic": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "sender": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatAttachment": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the uploaded file"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "pdf",
              "doc",
              "file"
            ],
            "description": "Type of attachment"
          },
          "name": {
            "type": "string",
            "description": "Original filename"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the file"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication required or token invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "statusCode": 401,
              "message": "Access token required"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Insufficient permissions for this operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "statusCode": 403,
              "message": "Access denied - insufficient permissions"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "statusCode": 404,
              "message": "Resource not found"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Request validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "statusCode": 400,
              "message": "Validation error",
              "errors": [
                "Email is required",
                "Password must be at least 6 characters"
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "statusCode": 500,
              "message": "Internal server error"
            }
          }
        }
      }
    },
    "EnrollmentRequest": {
      "type": "object",
      "required": ["courseId"],
      "properties": {
        "courseId": {
          "type": "string",
          "description": "ID of the course to enroll in",
          "example": "64f456def789abc123456789"
        }
      }
    },
    "Enrollment": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Enrollment unique identifier",
          "example": "64f789abc123def456789012"
        },
        "studentId": {
          "type": "string",
          "description": "Student user ID",
          "example": "64f123abc456def789012345"
        },
        "courseId": {
          "type": "string",
          "description": "Course ID",
          "example": "64f456def789abc123456789"
        },
        "enrollmentDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when student enrolled",
          "example": "2025-08-19T10:30:00.000Z"
        },
        "status": {
          "type": "string",
          "enum": ["enrolled", "completed", "withdrawn", "suspended"],
          "description": "Enrollment status",
          "example": "enrolled"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Enrollment creation timestamp",
          "example": "2025-08-19T10:30:00.000Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Enrollment last update timestamp",
          "example": "2025-08-19T14:20:00.000Z"
        }
      }
    },
    "TrainingProvider": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Training provider unique identifier",
          "example": "64f789abc123def456789013"
        },
        "userId": {
          "type": "string",
          "description": "Associated user ID",
          "example": "64f123abc456def789012345"
        },
        "name": {
          "type": "string",
          "description": "Training institute name",
          "example": "Tech Academy"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Contact email",
          "example": "info@techacademy.com"
        },
        "phone": {
          "type": "string",
          "description": "Contact phone number",
          "example": "+92-300-1234567"
        },
        "picture": {
          "type": "string",
          "description": "Profile picture URL",
          "example": "https://example.com/picture.jpg"
        },
        "about": {
          "type": "string",
          "description": "About the training institute",
          "example": "Leading technology training institute"
        },
        "established": {
          "type": "string",
          "format": "date",
          "description": "Establishment date",
          "example": "2015-01-01"
        },
        "focusAreas": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Areas of specialization",
          "example": ["Web Development", "Data Science"]
        },
        "location": {
          "type": "string",
          "description": "Location address",
          "example": "123 Training Street, Karachi"
        },
        "stats": {
          "type": "object",
          "properties": {
            "totalStudents": {
              "type": "number",
              "description": "Total number of students",
              "example": 150
            },
            "totalCourses": {
              "type": "number",
              "description": "Total number of courses",
              "example": 25
            },
            "completionRate": {
              "type": "number",
              "description": "Course completion rate percentage",
              "example": 85
            }
          }
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive", "suspended"],
          "description": "Account status",
          "example": "active"
        },
        "courses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of course IDs",
          "example": ["64f456def789abc123456789"]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Profile creation timestamp",
          "example": "2025-08-19T10:30:00.000Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Profile last update timestamp",
          "example": "2025-08-19T14:20:00.000Z"
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/certifications": {
      "post": {
        "summary": "Create a new certification",
        "tags": [
          "Certifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "issuedBy"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "AWS Certified Solutions Architect"
                  },
                  "issuedBy": {
                    "type": "string",
                    "example": "Amazon Web Services"
                  },
                  "issueDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2023-06-15"
                  },
                  "certificateFile": {
                    "type": "string",
                    "example": "https://cloudinary.com/certificate.pdf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Certification created successfully"
          },
          "400": {
            "description": "Invalid data or certification already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all certifications",
        "tags": [
          "Certifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search by certification name"
          },
          {
            "in": "query",
            "name": "issuedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by issuer"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "description": "Sort field and order"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "Fields to select (comma-separated)"
          }
        ],
        "responses": {
          "200": {
            "description": "Certifications retrieved successfully"
          }
        }
      }
    },
    "/api/v1/certifications/search": {
      "get": {
        "summary": "Search certifications",
        "tags": [
          "Certifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2
            },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully"
          },
          "400": {
            "description": "Search query too short"
          }
        }
      }
    },
    "/api/v1/certifications/issuer/{issuer}": {
      "get": {
        "summary": "Get certifications by issuer",
        "tags": [
          "Certifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "issuer",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2
            },
            "description": "Issuer name"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            },
            "description": "Number of records per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Certifications by issuer retrieved successfully"
          },
          "400": {
            "description": "Issuer name too short"
          }
        }
      }
    },
    "/api/v1/certifications/{id}": {
      "get": {
        "summary": "Get certification by ID",
        "tags": [
          "Certifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Certification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Certification retrieved successfully"
          },
          "400": {
            "description": "Invalid certification ID"
          },
          "404": {
            "description": "Certification not found"
          }
        }
      },
      "put": {
        "summary": "Update certification",
        "tags": [
          "Certifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Certification ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Certification Name"
                  },
                  "issuedBy": {
                    "type": "string",
                    "example": "Updated Issuer"
                  },
                  "issueDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2023-07-20"
                  },
                  "certificateFile": {
                    "type": "string",
                    "example": "https://cloudinary.com/new-certificate.pdf"
                  },
                  "extracted": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certification updated successfully"
          },
          "400": {
            "description": "Invalid data or certification already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Certification not found"
          }
        }
      },
      "delete": {
        "summary": "Delete certification (Admin only)",
        "tags": [
          "Certifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Certification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Certification deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Certification not found"
          }
        }
      }
    },
    "/api/v1/chat/conversations/start": {
      "post": {
        "summary": "Start or get existing conversation",
        "description": "Creates a new conversation or returns existing conversation between two users",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "participantId"
                ],
                "properties": {
                  "participantId": {
                    "type": "string",
                    "description": "ID of the other user to start conversation with",
                    "example": "64f123abc456def789012345"
                  },
                  "targetUserId": {
                    "type": "string",
                    "description": "ID of the user to start conversation with",
                    "example": "60f7b3b3b3b3b3b3b3b3b3b3"
                  },
                  "isGroup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this is a group conversation (future feature)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name for group conversation (required if isGroup is true)",
                    "example": "Project Discussion"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation retrieved or created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversation": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "64f456def789abc123456789"
                            },
                            "participants": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "64f123abc456def789012345",
                                "64f456def789abc123456789"
                              ]
                            },
                            "lastMessage": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string"
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "isActive": {
                              "type": "boolean",
                              "example": true
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "$ref": "#/components/schemas/ChatConversation"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid participant ID or cannot start conversation with self"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not allowed by role rules"
          },
          "404": {
            "description": "Target user not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/conversations": {
      "get": {
        "summary": "Get user's conversations list",
        "description": "Retrieve paginated list of user's conversations with last message details",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "maximum": 50
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            },
            "description": "Number of conversations per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "description": "Search by participant name"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "participant": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "fullName": {
                                    "type": "string"
                                  },
                                  "avatar": {
                                    "type": "string"
                                  }
                                }
                              },
                              "lastMessage": {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "string"
                                  },
                                  "timestamp": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "isRead": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              "unreadCount": {
                                "type": "integer"
                              }
                            },
                            "$ref": "#/components/schemas/ChatConversationPreview"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pages": {
                              "type": "integer"
                            }
                          },
                          "$ref": "#/components/schemas/PaginationInfo"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversations retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/conversations/{conversationId}": {
      "get": {
        "summary": "Get specific conversation details",
        "description": "Retrieve conversation details with message history",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for message pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of messages per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversation": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "participants": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "fullName": {
                                    "type": "string"
                                  },
                                  "avatar": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "$ref": "#/components/schemas/ChatConversation"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "sender": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "fullName": {
                                    "type": "string"
                                  }
                                }
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "isRead": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pages": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation details retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid conversation ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - not a participant"
          },
          "404": {
            "description": "Conversation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/messages": {
      "post": {
        "summary": "Send a message",
        "description": "Send a text message with optional file attachments to a conversation",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "conversationId",
                  "content"
                ],
                "properties": {
                  "conversationId": {
                    "type": "string",
                    "description": "ID of the conversation to send message to",
                    "example": "64f456def789abc123456789"
                  },
                  "content": {
                    "type": "string",
                    "description": "Message content/text",
                    "example": "Hello, how are you?"
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Optional file attachments (max 5 files, 10MB each)",
                    "maxItems": 5
                  },
                  "text": {
                    "type": "string"
                  },
                  "replyTo": {
                    "type": "string"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "conversationId"
                ],
                "properties": {
                  "conversationId": {
                    "type": "string",
                    "description": "ID of the conversation to send message to",
                    "example": "60f7b3b3b3b3b3b3b3b3b3b3"
                  },
                  "text": {
                    "type": "string",
                    "maxLength": 5000,
                    "description": "Message text content",
                    "example": "Hello, how are you?"
                  },
                  "replyTo": {
                    "type": "string",
                    "description": "ID of message being replied to",
                    "example": "60f7b3b3b3b3b3b3b3b3b3b4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message sent successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "$ref": "#/components/schemas/ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "64f789abc123def456789012"
                            },
                            "content": {
                              "type": "string",
                              "example": "Hello, how are you?"
                            },
                            "sender": {
                              "type": "string",
                              "example": "64f123abc456def789012345"
                            },
                            "conversationId": {
                              "type": "string",
                              "example": "64f456def789abc123456789"
                            },
                            "attachments": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "filename": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  },
                                  "fileType": {
                                    "type": "string"
                                  },
                                  "fileSize": {
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "isRead": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - missing required fields or file validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - not a conversation participant"
          },
          "404": {
            "description": "Conversation not found"
          },
          "413": {
            "description": "File too large or too many attachments"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/messages/{conversationId}": {
      "get": {
        "summary": "Get messages from a conversation",
        "description": "Retrieve paginated messages from a specific conversation",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID",
            "example": "64f456def789abc123456789"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "maximum": 50
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of messages per page"
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Get messages before this timestamp (for infinite scroll)"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "sender": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "fullName": {
                                    "type": "string"
                                  },
                                  "avatar": {
                                    "type": "string"
                                  }
                                }
                              },
                              "attachments": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "filename": {
                                      "type": "string"
                                    },
                                    "url": {
                                      "type": "string"
                                    },
                                    "fileType": {
                                      "type": "string"
                                    },
                                    "fileSize": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "isRead": {
                                "type": "boolean"
                              },
                              "editedAt": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                              }
                            },
                            "$ref": "#/components/schemas/ChatMessage"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pages": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          },
                          "$ref": "#/components/schemas/PaginationInfo"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Messages retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid conversation ID or pagination parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - not a conversation participant"
          },
          "404": {
            "description": "Conversation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/messages/{conversationId}/read": {
      "patch": {
        "summary": "Mark messages as read",
        "description": "Mark all or specific messages in a conversation as read",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID",
            "example": "64f456def789abc123456789"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specific message IDs to mark as read (optional - if not provided, marks all unread messages)",
                    "example": [
                      "64f789abc123def456789012",
                      "64f890abc123def456789013"
                    ]
                  },
                  "upToMessageId": {
                    "type": "string",
                    "description": "Mark all messages up to this message ID as read",
                    "example": "64f789abc123def456789012"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Messages marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "markedCount": {
                          "type": "integer",
                          "description": "Number of messages marked as read",
                          "example": 5
                        },
                        "conversationId": {
                          "type": "string"
                        },
                        "unreadCount": {
                          "type": "integer",
                          "description": "New unread count for the user"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Messages marked as read successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid conversation ID or message ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - not a conversation participant"
          },
          "404": {
            "description": "Conversation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/chat/typing": {
      "post": {
        "summary": "Send typing indicator",
        "description": "Send real-time typing indicator to other conversation participants",
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "conversationId",
                  "isTyping"
                ],
                "properties": {
                  "conversationId": {
                    "type": "string",
                    "description": "Conversation ID where typing indicator should be sent",
                    "example": "64f456def789abc123456789"
                  },
                  "isTyping": {
                    "type": "boolean",
                    "description": "Whether user is currently typing (true) or stopped typing (false)",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typing indicator sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Typing indicator sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - not a conversation participant"
          },
          "404": {
            "description": "Conversation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/courses": {
      "get": {
        "summary": "Get all courses with pagination and filtering",
        "description": "Retrieve a paginated list of approved courses with optional filtering by category, price range, and type",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Number of courses per page (max 50)",
            "example": 10
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by course category",
            "example": "Technology"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "online",
                "offline",
                "hybrid"
              ]
            },
            "description": "Filter by course delivery type",
            "example": "online"
          },
          {
            "in": "query",
            "name": "priceMin",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Minimum price filter",
            "example": 100
          },
          {
            "in": "query",
            "name": "priceMax",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Maximum price filter",
            "example": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Courses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "courses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Course"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationInfo"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Courses retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No courses found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new course",
        "description": "Create a new course (Only available to training providers with active subscription)",
        "tags": [
          "Courses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "instructor",
                  "duration",
                  "price",
                  "language",
                  "type",
                  "description",
                  "objectives",
                  "skills",
                  "category"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Course title",
                    "example": "Web Development Fundamentals"
                  },
                  "instructor": {
                    "type": "string",
                    "description": "Instructor name",
                    "example": "John Doe"
                  },
                  "duration": {
                    "type": "string",
                    "description": "Course duration",
                    "example": "8 weeks"
                  },
                  "price": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Course price in PKR",
                    "example": 299.99
                  },
                  "language": {
                    "type": "string",
                    "description": "Course language",
                    "example": "English"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "online",
                      "offline",
                      "hybrid"
                    ],
                    "description": "Course delivery type",
                    "example": "online"
                  },
                  "description": {
                    "type": "string",
                    "description": "Detailed course description",
                    "example": "Learn the fundamentals of web development including HTML, CSS, and JavaScript"
                  },
                  "objectives": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Course learning objectives",
                    "example": [
                      "Learn HTML structure and semantics",
                      "Master CSS styling and layouts",
                      "Understand JavaScript fundamentals"
                    ]
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Skills gained from this course",
                    "example": [
                      "Frontend Development",
                      "Responsive Design",
                      "JavaScript Programming"
                    ]
                  },
                  "category": {
                    "type": "string",
                    "description": "Course category",
                    "example": "Technology"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Course created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "course": {
                          "$ref": "#/components/schemas/Course"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Course created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only training providers can create courses or subscription required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Course limit exceeded for current subscription plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/courses/search": {
      "get": {
        "summary": "Search courses by title, instructor, or category",
        "description": "Perform advanced search across courses with multiple filter options and full-text search capabilities",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string",
              "minLength": 3
            },
            "required": true,
            "description": "Search query for course title, instructor, or description (minimum 3 characters)",
            "example": "web development"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by course category",
            "example": "Technology"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "online",
                "offline",
                "hybrid"
              ]
            },
            "description": "Filter by course delivery type",
            "example": "online"
          },
          {
            "in": "query",
            "name": "priceMin",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Minimum price filter",
            "example": 100
          },
          {
            "in": "query",
            "name": "priceMax",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Maximum price filter",
            "example": 500
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Number of courses per page (max 50)",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "courses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Course"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationInfo"
                        },
                        "searchQuery": {
                          "type": "string",
                          "example": "web development"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Search completed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No courses found matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/courses/provider/{providerId}": {
      "get": {
        "summary": "Get courses by training provider",
        "description": "Retrieve all courses offered by a specific training provider/school",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "providerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Training provider (school) ID",
            "example": "64f789abc123def456789012"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Number of courses per page (max 50)",
            "example": 10
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "pending_approval",
                "approved",
                "rejected",
                "archived"
              ]
            },
            "description": "Filter by course status",
            "example": "approved"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider courses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "courses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Course"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationInfo"
                        },
                        "providerId": {
                          "type": "string",
                          "example": "64f789abc123def456789012"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Provider courses retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No courses found for this provider or provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/courses/{id}": {
      "get": {
        "summary": "Get course by ID",
        "description": "Retrieve detailed information about a specific course including instructor details and enrollment information",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Course unique identifier",
            "example": "64f456def789abc123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "Course retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "course": {
                          "$ref": "#/components/schemas/Course"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Course retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Course not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a course",
        "tags": [
          "Courses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Course ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "instructor": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "language": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "online",
                      "offline",
                      "hybrid"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "objectives": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "category": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Course updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Can only update own courses"
          },
          "404": {
            "description": "Course not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a course (school only)",
        "tags": [
          "Courses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Course ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Course deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/employers": {
      "post": {
        "summary": "Create a new company profile",
        "description": "Create a new employer/company profile (Only available to users with employer role)",
        "tags": [
          "Employers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "companyName",
                  "companySize",
                  "industry"
                ],
                "properties": {
                  "companyName": {
                    "type": "string",
                    "description": "Company or organization name",
                    "example": "TechCorp Solutions"
                  },
                  "companyDescription": {
                    "type": "string",
                    "description": "Brief description of the company",
                    "example": "Leading software development company specializing in web and mobile applications"
                  },
                  "companySize": {
                    "type": "string",
                    "enum": [
                      "1-10",
                      "11-50",
                      "51-200",
                      "201-500",
                      "501-1000",
                      "1000+"
                    ],
                    "description": "Company size range",
                    "example": "51-200"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Industry sector",
                    "example": "Information Technology"
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Company website URL",
                    "example": "https://techcorp.com"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "string",
                        "example": "456 Business Avenue"
                      },
                      "city": {
                        "type": "string",
                        "example": "Karachi"
                      },
                      "state": {
                        "type": "string",
                        "example": "Sindh"
                      },
                      "country": {
                        "type": "string",
                        "example": "Pakistan"
                      },
                      "postalCode": {
                        "type": "string",
                        "example": "75600"
                      }
                    }
                  },
                  "establishedYear": {
                    "type": "integer",
                    "minimum": 1800,
                    "maximum": 2025,
                    "description": "Year company was established",
                    "example": 2015
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employer profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "employer": {
                          "$ref": "#/components/schemas/Employer"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Employer profile created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only users with employer role can create company profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Company profile already exists for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all companies with pagination and filtering",
        "description": "Retrieve a paginated list of verified company profiles with optional filtering",
        "tags": [
          "Employers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            },
            "description": "Number of companies per page (max 50)",
            "example": 20
          },
          {
            "in": "query",
            "name": "industry",
            "schema": {
              "type": "string"
            },
            "description": "Filter by industry sector",
            "example": "Information Technology"
          },
          {
            "in": "query",
            "name": "companySize",
            "schema": {
              "type": "string",
              "enum": [
                "1-10",
                "11-50",
                "51-200",
                "201-500",
                "501-1000",
                "1000+"
              ]
            },
            "description": "Filter by company size",
            "example": "51-200"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "Filter by company location (city)",
            "example": "Karachi"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationInfo"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Companies retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No companies found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employers/{id}": {
      "get": {
        "summary": "Get a company by ID",
        "tags": [
          "Employers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Company fetched successfully"
          },
          "404": {
            "description": "Company not found"
          }
        }
      },
      "put": {
        "summary": "Update company details",
        "tags": [
          "Employers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "companySize": {
                    "type": "string"
                  },
                  "industry": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company profile updated successfully"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Company not found"
          }
        }
      },
      "delete": {
        "summary": "Delete company profile and related jobs",
        "tags": [
          "Employers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Company profile and related jobs deleted successfully"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/api/v1/enrollments": {
      "post": {
        "summary": "Enroll in a course",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully enrolled in course",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully enrolled in course"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "enrollment": {
                          "$ref": "#/components/schemas/Enrollment"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Already enrolled, course at capacity, or course not available"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Course not found"
          }
        }
      },
      "get": {
        "summary": "Get user's enrollments",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            },
            "description": "Number of enrollments per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "enrolled",
                "in-progress",
                "completed",
                "withdrawn",
                "suspended"
              ]
            },
            "description": "Filter by enrollment status"
          },
          {
            "in": "query",
            "name": "paymentStatus",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "paid",
                "failed",
                "refunded"
              ]
            },
            "description": "Filter by payment status"
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Enrollments fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "enrollments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Enrollment"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 25
                            },
                            "pages": {
                              "type": "integer",
                              "example": 3
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/enrollments/{id}": {
      "get": {
        "summary": "Get enrollment by ID",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Enrollment ID",
            "example": "64f123abc456def789012345"
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Enrollment fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "enrollment": {
                          "$ref": "#/components/schemas/Enrollment"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Enrollment not found"
          }
        }
      }
    },
    "/api/v1/enrollments/{id}/status": {
      "patch": {
        "summary": "Update enrollment status",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Enrollment ID",
            "example": "64f123abc456def789012345"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "enrolled",
                      "in-progress",
                      "completed",
                      "withdrawn",
                      "suspended"
                    ],
                    "example": "in-progress"
                  },
                  "progressPercentage": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "example": 75
                  },
                  "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-09-20T15:30:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Enrollment status updated successfully"
          },
          "400": {
            "description": "Invalid status value or access denied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Enrollment not found"
          }
        }
      }
    },
    "/api/v1/enrollments/{id}/payment": {
      "patch": {
        "summary": "Update payment status (Admin/Provider only)",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Enrollment ID",
            "example": "64f123abc456def789012345"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "paymentStatus"
                ],
                "properties": {
                  "paymentStatus": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "paid",
                      "failed",
                      "refunded"
                    ],
                    "example": "paid"
                  },
                  "transactionId": {
                    "type": "string",
                    "example": "txn_1234567890"
                  },
                  "paymentMethod": {
                    "type": "string",
                    "enum": [
                      "stripe",
                      "paypal",
                      "bank_transfer",
                      "cash",
                      "free"
                    ],
                    "example": "stripe"
                  },
                  "paymentDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-08-20T11:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status updated successfully"
          },
          "400": {
            "description": "Invalid payment status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Enrollment not found"
          }
        }
      }
    },
    "/api/v1/enrollments/{id}/withdraw": {
      "patch": {
        "summary": "Withdraw from course",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Enrollment ID",
            "example": "64f123abc456def789012345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully withdrawn from course"
          },
          "400": {
            "description": "Already withdrawn or course completed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Enrollment not found"
          }
        }
      }
    },
    "/api/v1/enrollments/course/{courseId}": {
      "get": {
        "summary": "Get course enrollments (Provider/Admin only)",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Course ID",
            "example": "64f789abc123def456789012"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            },
            "description": "Number of enrollments per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "enrolled",
                "in-progress",
                "completed",
                "withdrawn",
                "suspended"
              ]
            },
            "description": "Filter by enrollment status"
          },
          {
            "in": "query",
            "name": "paymentStatus",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "paid",
                "failed",
                "refunded"
              ]
            },
            "description": "Filter by payment status"
          }
        ],
        "responses": {
          "200": {
            "description": "Course enrollments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Course enrollments fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "enrollments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Enrollment"
                          }
                        },
                        "courseInfo": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "example": "JavaScript Fundamentals"
                            },
                            "instructor": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "totalEnrollments": {
                              "type": "integer",
                              "example": 25
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 25
                            },
                            "pages": {
                              "type": "integer",
                              "example": 3
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/enrollments/statistics": {
      "get": {
        "summary": "Get enrollment statistics",
        "tags": [
          "Enrollments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Enrollment statistics fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalEnrollments": {
                              "type": "integer",
                              "example": 150
                            },
                            "completedEnrollments": {
                              "type": "integer",
                              "example": 45
                            },
                            "activeEnrollments": {
                              "type": "integer",
                              "example": 90
                            },
                            "paidEnrollments": {
                              "type": "integer",
                              "example": 120
                            },
                            "totalRevenue": {
                              "type": "number",
                              "example": 359880
                            },
                            "completionRate": {
                              "type": "string",
                              "example": "30.00"
                            },
                            "paymentRate": {
                              "type": "string",
                              "example": "80.00"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/v1/experiences": {
      "post": {
        "summary": "Create a new experience",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "company",
                  "startDate"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software Engineer"
                  },
                  "company": {
                    "type": "string",
                    "example": "Google"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2022-01-15"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2023-06-30"
                  },
                  "description": {
                    "type": "string",
                    "example": "Developed web applications using React and Node.js"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Experience created successfully"
          },
          "400": {
            "description": "Invalid data or date validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all experiences",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter by company name (case-insensitive partial match)"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by job title (case-insensitive partial match)"
          },
          {
            "in": "query",
            "name": "isCurrentJob",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by current job status"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-startDate"
            },
            "description": "Sort field and order"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "Fields to select (comma-separated)"
          }
        ],
        "responses": {
          "200": {
            "description": "Experiences retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/experiences/search": {
      "get": {
        "summary": "Search experiences",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2
            },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 50
            },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully"
          },
          "400": {
            "description": "Search query too short"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/experiences/company/{company}": {
      "get": {
        "summary": "Get experiences by company",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "company",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2
            },
            "description": "Company name"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            },
            "description": "Number of records per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Experiences by company retrieved successfully"
          },
          "400": {
            "description": "Company name too short"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/experiences/{id}": {
      "get": {
        "summary": "Get experience by ID",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Experience ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Experience retrieved successfully"
          },
          "400": {
            "description": "Invalid experience ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Experience not found"
          }
        }
      },
      "put": {
        "summary": "Update experience",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Experience ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Senior Software Engineer"
                  },
                  "company": {
                    "type": "string",
                    "example": "Updated Company"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2022-02-01"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": null
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated description of responsibilities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Experience updated successfully"
          },
          "400": {
            "description": "Invalid data or date validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Experience not found"
          }
        }
      },
      "delete": {
        "summary": "Delete experience",
        "tags": [
          "Experiences"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Experience ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Experience deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Experience not found"
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "summary": "Get all job posts with pagination and filtering",
        "description": "Retrieve a paginated list of active job posts with optional filtering by location, employment type, and category",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            },
            "description": "Number of jobs per page (max 50)",
            "example": 20
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "Filter by job location",
            "example": "Lahore"
          },
          {
            "in": "query",
            "name": "employmentType",
            "schema": {
              "type": "string",
              "enum": [
                "Full-time",
                "Part-time",
                "Internship",
                "Contract"
              ]
            },
            "description": "Filter by employment type",
            "example": "Full-time"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by job category",
            "example": "Technology"
          },
          {
            "in": "query",
            "name": "salaryMin",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Minimum salary filter",
            "example": 50000
          },
          {
            "in": "query",
            "name": "salaryMax",
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Maximum salary filter",
            "example": 150000
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "jobs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Job"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationInfo"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Jobs retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No jobs found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new job post",
        "description": "Create a new job posting (Only available to verified employers)",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "jobTitle",
                  "department",
                  "location",
                  "employmentType",
                  "jobDescription",
                  "category",
                  "applicationDeadline"
                ],
                "properties": {
                  "jobTitle": {
                    "type": "string",
                    "description": "Job position title",
                    "example": "Senior Software Engineer"
                  },
                  "department": {
                    "type": "string",
                    "description": "Department or team",
                    "example": "Engineering"
                  },
                  "location": {
                    "type": "string",
                    "description": "Job location (city/remote)",
                    "example": "Lahore"
                  },
                  "employmentType": {
                    "type": "string",
                    "enum": [
                      "Full-time",
                      "Part-time",
                      "Internship",
                      "Contract"
                    ],
                    "description": "Type of employment",
                    "example": "Full-time"
                  },
                  "salary": {
                    "type": "object",
                    "description": "Salary range information",
                    "properties": {
                      "min": {
                        "type": "number",
                        "description": "Minimum salary",
                        "example": 80000
                      },
                      "max": {
                        "type": "number",
                        "description": "Maximum salary",
                        "example": 150000
                      },
                      "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "PKR"
                      }
                    }
                  },
                  "jobDescription": {
                    "type": "string",
                    "description": "Detailed job description and responsibilities",
                    "example": "We are looking for a Senior Software Engineer to join our team. You will be responsible for developing scalable web applications, mentoring junior developers, and contributing to architectural decisions."
                  },
                  "skillsRequired": {
                    "type": "array",
                    "description": "Required skills and proficiency levels",
                    "items": {
                      "type": "object",
                      "properties": {
                        "skill": {
                          "type": "string",
                          "example": "JavaScript"
                        },
                        "proficiency": {
                          "type": "string",
                          "enum": [
                            "Beginner",
                            "Intermediate",
                            "Advanced"
                          ],
                          "example": "Advanced"
                        }
                      }
                    },
                    "example": [
                      {
                        "skill": "JavaScript",
                        "proficiency": "Advanced"
                      },
                      {
                        "skill": "React",
                        "proficiency": "Intermediate"
                      },
                      {
                        "skill": "Node.js",
                        "proficiency": "Intermediate"
                      }
                    ]
                  },
                  "benefits": {
                    "type": "string",
                    "description": "Job benefits and perks",
                    "example": "Health insurance, Flexible working hours, Remote work options, Professional development budget"
                  },
                  "category": {
                    "type": "string",
                    "description": "Job category",
                    "example": "Technology"
                  },
                  "applicationDeadline": {
                    "type": "string",
                    "format": "date",
                    "description": "Application deadline (YYYY-MM-DD)",
                    "example": "2025-12-31"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job": {
                          "$ref": "#/components/schemas/Job"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Job created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only verified employers can create jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{id}": {
      "get": {
        "summary": "Get a job by ID",
        "description": "Retrieve detailed information about a specific job posting including company details and requirements",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job unique identifier",
            "example": "64f789abc123def456789012"
          }
        ],
        "responses": {
          "200": {
            "description": "Job retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job": {
                          "$ref": "#/components/schemas/Job"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Job retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a job post",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobTitle": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "employmentType": {
                    "type": "string",
                    "enum": [
                      "Full-time",
                      "Part-time",
                      "Internship",
                      "Contract"
                    ]
                  },
                  "salary": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "number"
                      },
                      "max": {
                        "type": "number"
                      },
                      "currency": {
                        "type": "string"
                      }
                    }
                  },
                  "jobDescription": {
                    "type": "string"
                  },
                  "skillsRequired": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "skill": {
                          "type": "string"
                        },
                        "proficiency": {
                          "type": "string",
                          "enum": [
                            "Beginner",
                            "Intermediate",
                            "Advanced"
                          ]
                        }
                      }
                    }
                  },
                  "benefits": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "applicationDeadline": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Only the job creator can update"
          },
          "404": {
            "description": "Job not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a job post",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Job deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Only the job creator can delete"
          },
          "404": {
            "description": "Job not found"
          }
        }
      }
    },
    "/api/v1/jobs/search": {
      "get": {
        "summary": "Search jobs with advanced filtering",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Search term for job title, description, or company"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "Location filter"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Job category filter"
          },
          {
            "in": "query",
            "name": "employmentType",
            "schema": {
              "type": "string"
            },
            "description": "Employment type filter"
          },
          {
            "in": "query",
            "name": "minSalary",
            "schema": {
              "type": "number"
            },
            "description": "Minimum salary filter"
          },
          {
            "in": "query",
            "name": "maxSalary",
            "schema": {
              "type": "number"
            },
            "description": "Maximum salary filter"
          },
          {
            "in": "query",
            "name": "skills",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated skills filter"
          }
        ]
      }
    },
    "/api/v1/jobs/my/posts": {
      "get": {
        "summary": "Get jobs posted by current employer",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/jobs/{id}/status": {
      "patch": {
        "summary": "Update job status",
        "tags": [
          "Jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "closed",
                      "expired"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kyc": {
      "post": {
        "summary": "Upload KYC documents",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "documents"
                ],
                "properties": {
                  "documents": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/KYCDocument"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "KYC documents uploaded successfully"
          },
          "400": {
            "description": "Invalid document data or KYC already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all KYC documents (Admin only)",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "verified",
                "rejected"
              ]
            },
            "description": "Filter by verification status"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort field and order"
          }
        ],
        "responses": {
          "200": {
            "description": "KYC documents retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/api/v1/kyc/my": {
      "get": {
        "summary": "Get current user's KYC status",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "KYC retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No KYC record found"
          }
        }
      }
    },
    "/api/v1/kyc/{id}": {
      "get": {
        "summary": "Get KYC by ID",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "KYC ID"
          }
        ],
        "responses": {
          "200": {
            "description": "KYC retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "KYC not found"
          }
        }
      },
      "put": {
        "summary": "Update KYC documents",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "KYC ID (will be ignored, uses current user's KYC)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "documents"
                ],
                "properties": {
                  "documents": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/KYCDocument"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "KYC documents updated successfully"
          },
          "400": {
            "description": "Invalid document data or cannot update verified KYC"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "KYC not found"
          }
        }
      },
      "delete": {
        "summary": "Delete KYC record (Admin only)",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "KYC ID"
          }
        ],
        "responses": {
          "200": {
            "description": "KYC record deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "KYC not found"
          }
        }
      }
    },
    "/api/v1/kyc/{id}/verify": {
      "patch": {
        "summary": "Verify or reject KYC (Admin only)",
        "tags": [
          "KYC"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "KYC ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "verified",
                      "rejected"
                    ],
                    "example": "verified"
                  },
                  "rejectionReason": {
                    "type": "string",
                    "description": "Required when status is 'rejected'",
                    "example": "Document quality is poor"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "KYC verification status updated"
          },
          "400": {
            "description": "Invalid status or missing rejection reason"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "KYC not found"
          }
        }
      }
    },
    "/api/v1/notifications": {
      "get": {
        "summary": "Get user notifications with advanced filtering",
        "description": "Retrieve paginated notifications for authenticated user with filtering options and Redis caching",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Number of notifications per page (max 50)",
            "example": 10
          },
          {
            "in": "query",
            "name": "unread",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter unread notifications only",
            "example": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "course_enrollment",
                "course_completion",
                "certificate_issued",
                "payment_received",
                "payment_failed",
                "job_application",
                "interview_scheduled",
                "profile_verified",
                "message_received",
                "system_update",
                "security_alert",
                "subscription_expiry"
              ]
            },
            "description": "Filter by notification type",
            "example": "course_enrollment"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort order (field with optional - for descending)",
            "example": "-createdAt"
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful response with notifications",
                    "value": {
                      "success": true,
                      "statusCode": 200,
                      "data": {
                        "notifications": [
                          {
                            "_id": "64f123abc456def789012345",
                            "title": "Course Enrollment Confirmed",
                            "message": "You have successfully enrolled in JavaScript Fundamentals",
                            "type": "course_enrollment",
                            "isRead": false,
                            "priority": "normal",
                            "createdAt": "2025-08-19T10:30:00.000Z",
                            "relatedEntity": {
                              "entityType": "course",
                              "entityId": "64f456def789abc123456789"
                            }
                          }
                        ],
                        "pagination": {
                          "page": 1,
                          "limit": 10,
                          "total": 25,
                          "pages": 3
                        },
                        "summary": {
                          "unreadCount": 5,
                          "totalCount": 25
                        }
                      },
                      "message": "Notifications retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/notifications/count": {
      "get": {
        "summary": "Get comprehensive notification statistics",
        "description": "Get total, unread, and breakdown by type notification counts with Redis caching",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 25
                        },
                        "unread": {
                          "type": "integer",
                          "example": 5
                        },
                        "byType": {
                          "type": "object",
                          "properties": {
                            "course_enrollment": {
                              "type": "integer",
                              "example": 8
                            },
                            "payment_received": {
                              "type": "integer",
                              "example": 5
                            },
                            "job_application": {
                              "type": "integer",
                              "example": 3
                            }
                          }
                        },
                        "recent": {
                          "type": "integer",
                          "description": "Notifications from last 24 hours",
                          "example": 8
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Notification count retrieved successfully"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful count response",
                    "value": {
                      "success": true,
                      "statusCode": 200,
                      "data": {
                        "total": 25,
                        "unread": 5,
                        "byType": {
                          "course_enrollment": 8,
                          "payment_received": 5,
                          "job_application": 3,
                          "system_update": 2
                        },
                        "recent": 8
                      },
                      "message": "Notification count retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/notifications/{id}/read": {
      "patch": {
        "summary": "Mark notification as read",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/api/v1/notifications/read-all": {
      "patch": {
        "summary": "Mark all notifications as read",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/notifications/{id}": {
      "delete": {
        "summary": "Delete notification",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/api/v1/notifications/create": {
      "post": {
        "summary": "Create a new notification (Admin only)",
        "description": "Create a single notification for a specific user",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "title",
                  "message",
                  "type"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "Recipient user ID",
                    "example": "64f123abc456def789012345"
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Notification title",
                    "example": "Course Enrollment Confirmed"
                  },
                  "message": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Notification message",
                    "example": "You have successfully enrolled in JavaScript Fundamentals course"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "course_enrollment",
                      "course_completion",
                      "certificate_issued",
                      "payment_received",
                      "payment_failed",
                      "job_application",
                      "interview_scheduled",
                      "profile_verified",
                      "message_received",
                      "system_update",
                      "security_alert",
                      "subscription_expiry"
                    ],
                    "description": "Type of notification",
                    "example": "course_enrollment"
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "normal",
                      "high",
                      "urgent"
                    ],
                    "default": "normal",
                    "description": "Notification priority",
                    "example": "normal"
                  },
                  "relatedEntity": {
                    "type": "object",
                    "properties": {
                      "entityType": {
                        "type": "string",
                        "enum": [
                          "course",
                          "job",
                          "application",
                          "payment",
                          "user",
                          "message"
                        ],
                        "example": "course"
                      },
                      "entityId": {
                        "type": "string",
                        "example": "64f456def789abc123456789"
                      }
                    }
                  }
                }
              },
              "examples": {
                "courseEnrollment": {
                  "summary": "Course enrollment notification",
                  "value": {
                    "userId": "64f123abc456def789012345",
                    "title": "Course Enrollment Confirmed",
                    "message": "You have successfully enrolled in JavaScript Fundamentals",
                    "type": "course_enrollment",
                    "priority": "normal",
                    "relatedEntity": {
                      "entityType": "course",
                      "entityId": "64f456def789abc123456789"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notification created successfully"
          },
          "400": {
            "description": "Bad request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/api/v1/notifications/bulk/create": {
      "post": {
        "summary": "Create multiple notifications (Admin only)",
        "description": "Create notifications for multiple users in bulk",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "notifications"
                ],
                "properties": {
                  "notifications": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "userId",
                        "title",
                        "message",
                        "type"
                      ],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "64f123abc456def789012345"
                        },
                        "title": {
                          "type": "string",
                          "example": "System Maintenance"
                        },
                        "message": {
                          "type": "string",
                          "example": "Scheduled maintenance will occur tonight"
                        },
                        "type": {
                          "type": "string",
                          "example": "system_update"
                        },
                        "priority": {
                          "type": "string",
                          "default": "normal",
                          "example": "high"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "systemUpdate": {
                  "summary": "System update notifications",
                  "value": {
                    "notifications": [
                      {
                        "userId": "64f123abc456def789012345",
                        "title": "System Maintenance",
                        "message": "Scheduled maintenance will occur tonight from 2-4 AM",
                        "type": "system_update",
                        "priority": "high"
                      },
                      {
                        "userId": "64f456def789abc123456789",
                        "title": "System Maintenance",
                        "message": "Scheduled maintenance will occur tonight from 2-4 AM",
                        "type": "system_update",
                        "priority": "high"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bulk notifications created successfully"
          },
          "400": {
            "description": "Bad request - Invalid notification data"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/api/v1/notifications/bulk/delete": {
      "delete": {
        "summary": "Delete multiple notifications",
        "description": "Delete multiple notifications by IDs for current user",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "notificationIds"
                ],
                "properties": {
                  "notificationIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of notification IDs to delete",
                    "example": [
                      "64f123abc456def789012345",
                      "64f456def789abc123456789"
                    ]
                  }
                }
              },
              "examples": {
                "bulkDelete": {
                  "summary": "Delete multiple notifications",
                  "value": {
                    "notificationIds": [
                      "64f123abc456def789012345",
                      "64f456def789abc123456789",
                      "64f789abc123def456789012"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletedCount": {
                          "type": "integer",
                          "example": 3
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Notifications deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid notification IDs"
          }
        }
      }
    },
    "/api/v1/notifications/preferences": {
      "get": {
        "summary": "Get user notification preferences",
        "description": "Get notification preferences for email, push, and in-app notifications",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification preferences retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "object",
                          "properties": {
                            "course_enrollment": {
                              "type": "boolean",
                              "example": true
                            },
                            "payment_received": {
                              "type": "boolean",
                              "example": true
                            },
                            "job_application": {
                              "type": "boolean",
                              "example": true
                            },
                            "security_alert": {
                              "type": "boolean",
                              "example": true
                            },
                            "system_update": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "push": {
                          "type": "object",
                          "properties": {
                            "course_enrollment": {
                              "type": "boolean",
                              "example": true
                            },
                            "message_received": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        },
                        "inApp": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update notification preferences",
        "description": "Update user's notification preferences for different channels",
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "object",
                    "properties": {
                      "course_enrollment": {
                        "type": "boolean"
                      },
                      "payment_received": {
                        "type": "boolean"
                      }
                    }
                  },
                  "push": {
                    "type": "object",
                    "properties": {
                      "message_received": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "examples": {
                "updatePreferences": {
                  "summary": "Update notification preferences",
                  "value": {
                    "email": {
                      "course_enrollment": true,
                      "payment_received": false,
                      "system_update": false
                    },
                    "push": {
                      "message_received": true,
                      "course_enrollment": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preferences updated successfully"
          }
        }
      }
    },
    "/api/v1/payments/create-intent": {
      "post": {
        "summary": "Create payment intent",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subscriptionId"
                ],
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/payments/confirm": {
      "post": {
        "summary": "Confirm payment",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "paymentIntentId",
                  "subscriptionId"
                ],
                "properties": {
                  "paymentIntentId": {
                    "type": "string",
                    "example": "pi_1234567890"
                  },
                  "subscriptionId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment confirmed successfully"
          },
          "400": {
            "description": "Payment not successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/payments/webhook": {
      "post": {
        "summary": "Stripe webhook endpoint",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook signature"
          }
        }
      }
    },
    "/api/v1/schools": {
      "get": {
        "summary": "Get all training providers",
        "tags": [
          "Training Providers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of providers per page"
          },
          {
            "in": "query",
            "name": "focusArea",
            "schema": {
              "type": "string"
            },
            "description": "Filter by focus area"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "Filter by city/location"
          }
        ],
        "responses": {
          "200": {
            "description": "List of training providers retrieved successfully"
          },
          "404": {
            "description": "No training providers found"
          }
        }
      }
    },
    "/api/v1/schools/search": {
      "get": {
        "summary": "Search training providers",
        "tags": [
          "Training Providers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Search query"
          },
          {
            "in": "query",
            "name": "focusArea",
            "schema": {
              "type": "string"
            },
            "description": "Filter by focus area"
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string"
            },
            "description": "Filter by city"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully"
          },
          "400": {
            "description": "Search query is required"
          }
        }
      }
    },
    "/api/v1/schools/profile": {
      "get": {
        "summary": "Get own training provider profile",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - Training provider only"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "put": {
        "summary": "Update own training provider profile",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "about": {
                    "type": "string",
                    "example": "Leading technology training institute"
                  },
                  "established": {
                    "type": "string",
                    "format": "date",
                    "example": "2015-01-01"
                  },
                  "focusAreas": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "Web Development",
                      "Data Science",
                      "AI/ML"
                    ]
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "example": "123 Training Street"
                      },
                      "city": {
                        "type": "string",
                        "example": "Karachi"
                      },
                      "state": {
                        "type": "string",
                        "example": "Sindh"
                      },
                      "country": {
                        "type": "string",
                        "example": "Pakistan"
                      },
                      "postalCode": {
                        "type": "string",
                        "example": "75000"
                      }
                    }
                  },
                  "contact": {
                    "type": "object",
                    "properties": {
                      "phone": {
                        "type": "string",
                        "example": "+92-300-1234567"
                      },
                      "email": {
                        "type": "string",
                        "example": "info@traininginstitute.com"
                      },
                      "website": {
                        "type": "string",
                        "example": "https://traininginstitute.com"
                      }
                    }
                  },
                  "accreditation": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "ISO 9001",
                      "NVQL Certified"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/v1/schools/stats": {
      "get": {
        "summary": "Get own training provider statistics",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied - Training provider only"
          }
        }
      }
    },
    "/api/v1/schools/match-students": {
      "get": {
        "summary": "Match students for a job based on required skills",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID to match students against"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matched students with match percentage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "job": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "jobTitle": {
                          "type": "string"
                        },
                        "requiredSkills": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "matchedStudents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "studentId": {
                            "type": "string"
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                              "fullName": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              }
                            }
                          },
                          "skills": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "matchedSkills": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "matchPercent": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid jobId, or job has no required skills"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Job not found"
          }
        }
      }
    },
    "/api/v1/schools/dashboard": {
      "get": {
        "summary": "Get dashboard analytics for a school",
        "tags": [
          "Training Providers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "schoolId",
            "schema": {
              "type": "string",
              "example": "64e1a2b3c4d5e6f7890a1234"
            },
            "required": true,
            "description": "The ID of the school (training provider)"
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard analytics fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "payload": {
                      "type": "object",
                      "properties": {
                        "totalEnrollments": {
                          "type": "integer"
                        },
                        "completedEnrollments": {
                          "type": "integer"
                        },
                        "completionRate": {
                          "type": "string"
                        },
                        "totalRevenue": {
                          "type": "number"
                        },
                        "totalActiveCourses": {
                          "type": "integer"
                        },
                        "activeCourses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Course"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "schoolId query parameter is required"
          },
          "500": {
            "description": "Failed to fetch dashboard analytics"
          }
        }
      }
    },
    "/api/v1/schools/students-directory": {
      "get": {
        "summary": "Get all students of a particular school",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "schoolId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the school (training institute)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of students per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of students retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "students": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "studentId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "courses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "schoolId query parameter is required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No students found for the given school"
          }
        }
      }
    },
    "/api/v1/schools/{id}": {
      "get": {
        "summary": "Get training provider by ID",
        "tags": [
          "Training Providers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Training provider ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Training provider retrieved successfully"
          },
          "404": {
            "description": "Training provider not found"
          }
        }
      },
      "delete": {
        "summary": "Delete training provider (Admin only)",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Training provider ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Training provider deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Training provider not found"
          }
        }
      }
    },
    "/api/v1/schools/{id}/status": {
      "patch": {
        "summary": "Update training provider status (Admin only)",
        "tags": [
          "Training Providers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Training provider ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "suspended"
                    ],
                    "example": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "description": "Invalid status value"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Training provider not found"
          }
        }
      }
    },
    "/api/v1/students": {
      "post": {
        "summary": "Create student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bio": {
                    "type": "string",
                    "example": "Passionate about technology and learning"
                  },
                  "location": {
                    "type": "string",
                    "example": "Lahore, Pakistan"
                  },
                  "website": {
                    "type": "string",
                    "example": "https://myportfolio.com"
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "JavaScript",
                      "React",
                      "Node.js"
                    ]
                  },
                  "gsceResult": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GSCEResult"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student profile created successfully"
          },
          "400": {
            "description": "Invalid data or profile already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all students (Admin only)",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "Filter by location (case-insensitive partial match)"
          },
          {
            "in": "query",
            "name": "skills",
            "schema": {
              "type": "string"
            },
            "description": "Filter by skills (comma-separated)"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort field and order"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "Fields to select (comma-separated)"
          }
        ],
        "responses": {
          "200": {
            "description": "Students retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/api/v1/students/my": {
      "get": {
        "summary": "Get current user's student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Student profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Student profile not found"
          }
        }
      }
    },
    "/api/v1/students/{id}": {
      "get": {
        "summary": "Get student by ID",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Student retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "put": {
        "summary": "Update student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bio": {
                    "type": "string",
                    "example": "Updated bio"
                  },
                  "location": {
                    "type": "string",
                    "example": "Karachi, Pakistan"
                  },
                  "website": {
                    "type": "string",
                    "example": "https://newportfolio.com"
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "Python",
                      "Django",
                      "PostgreSQL"
                    ]
                  },
                  "gsceResult": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GSCEResult"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student profile updated successfully"
          },
          "400": {
            "description": "Invalid data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "delete": {
        "summary": "Delete student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Student profile deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      }
    },
    "/api/v1/students/{id}/certifications": {
      "post": {
        "summary": "Add certification to student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "certificationId"
                ],
                "properties": {
                  "certificationId": {
                    "type": "string",
                    "example": "60f0f4f4f4f4f4f4f4f4f4f4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certification added successfully"
          },
          "400": {
            "description": "Invalid ID or certification already added"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      }
    },
    "/api/v1/students/{id}/certifications/{certId}": {
      "delete": {
        "summary": "Remove certification from student profile",
        "tags": [
          "Students"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Student ID"
          },
          {
            "in": "path",
            "name": "certId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Certification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Certification removed successfully"
          },
          "400": {
            "description": "Invalid ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      }
    },
    "/api/v1/subscriptions/plans": {
      "get": {
        "summary": "Get all subscription plans",
        "tags": [
          "Subscription Plans"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Filter by active status"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plans retrieved successfully"
          },
          "404": {
            "description": "No subscription plans found"
          }
        }
      },
      "post": {
        "summary": "Create a new subscription plan (Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "displayName",
                  "description",
                  "price",
                  "billingCycle",
                  "features",
                  "stripePriceId",
                  "stripeProductId"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "enum": [
                      "basic",
                      "premium",
                      "enterprise"
                    ],
                    "example": "premium"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Premium Plan"
                  },
                  "description": {
                    "type": "string",
                    "example": "Advanced features for growing training providers"
                  },
                  "price": {
                    "type": "number",
                    "example": 2999
                  },
                  "billingCycle": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "quarterly",
                      "yearly"
                    ],
                    "example": "monthly"
                  },
                  "features": {
                    "type": "object",
                    "properties": {
                      "maxCourses": {
                        "type": "number",
                        "example": 50
                      },
                      "maxStudents": {
                        "type": "number",
                        "example": 1000
                      },
                      "analyticsAccess": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "stripePriceId": {
                    "type": "string",
                    "example": "price_1234567890"
                  },
                  "stripeProductId": {
                    "type": "string",
                    "example": "prod_1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription plan created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "409": {
            "description": "Plan already exists"
          }
        }
      }
    },
    "/api/v1/subscriptions/plans/{id}": {
      "get": {
        "summary": "Get subscription plan by ID",
        "tags": [
          "Subscription Plans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Subscription plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plan retrieved successfully"
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      },
      "put": {
        "summary": "Update subscription plan (Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Subscription plan ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "features": {
                    "type": "object"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      },
      "delete": {
        "summary": "Delete subscription plan (Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Subscription plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plan deleted successfully"
          },
          "400": {
            "description": "Cannot delete plan with active subscriptions"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      }
    },
    "/api/v1/subscriptions": {
      "get": {
        "summary": "Get all subscriptions (Admin only)",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "cancelled",
                "expired",
                "pending"
              ]
            },
            "description": "Filter by subscription status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of subscriptions per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      },
      "post": {
        "summary": "Create a new subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription plan not found"
          },
          "409": {
            "description": "User already has an active subscription"
          }
        }
      }
    },
    "/api/v1/subscriptions/my-subscription": {
      "get": {
        "summary": "Get current user's subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No subscription found"
          }
        }
      }
    },
    "/api/v1/subscriptions/{id}/status": {
      "patch": {
        "summary": "Update subscription status (Admin only)",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Subscription ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "cancelled",
                      "expired",
                      "pending"
                    ],
                    "example": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription status updated successfully"
          },
          "400": {
            "description": "Invalid status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/subscriptions/cancel": {
      "post": {
        "summary": "Cancel current user's subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "example": "No longer needed"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/api/v1/subscriptions/stats": {
      "get": {
        "summary": "Get subscription usage statistics",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription stats retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/api/v1/subscriptions/create-payment-intent": {
      "post": {
        "summary": "Create payment intent for subscription",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subscriptionId"
                ],
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/subscriptions/confirm-payment": {
      "post": {
        "summary": "Confirm payment and activate subscription",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "paymentIntentId",
                  "subscriptionId"
                ],
                "properties": {
                  "paymentIntentId": {
                    "type": "string",
                    "example": "pi_1234567890"
                  },
                  "subscriptionId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment confirmed and subscription activated"
          },
          "400": {
            "description": "Payment not successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/users/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fullName",
                  "email",
                  "phone",
                  "password",
                  "role"
                ],
                "properties": {
                  "fullName": {
                    "type": "string",
                    "description": "User's full name",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "description": "User's phone number (10-15 digits)",
                    "example": "03001234567"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "student",
                      "school",
                      "employer"
                    ],
                    "description": "User role in the platform",
                    "example": "student"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "description": "User's password (minimum 6 characters)",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 201
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/login": {
      "post": {
        "summary": "Login a user",
        "description": "Authenticate user with email and password, returns access token and sets HTTP-only cookies",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User logged in successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/logout": {
      "post": {
        "summary": "Logout a user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "Get all users (Admin or authenticated access)",
        "description": "Retrieve paginated list of users with filtering and search capabilities",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of users per page (max 100)",
            "example": 20
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search by full name, email, or phone (case-insensitive)",
            "example": "john doe"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "student",
                "school",
                "employer",
                "admin"
              ]
            },
            "description": "Filter by user role",
            "example": "student"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "64f123abc456def789012345"
                              },
                              "fullName": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "email": {
                                "type": "string",
                                "example": "john@example.com"
                              },
                              "phone": {
                                "type": "string",
                                "example": "03001234567"
                              },
                              "role": {
                                "type": "string",
                                "example": "student"
                              },
                              "onboardingStage": {
                                "type": "string",
                                "example": "basic_info"
                              },
                              "status": {
                                "type": "string",
                                "example": "active"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-01-15T10:30:00.000Z"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "example": 150
                            },
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 20
                            },
                            "totalPages": {
                              "type": "integer",
                              "example": 8
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Users fetched successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Access token required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "statusCode": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to fetch users"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/webhooks/stripe": {
      "post": {
        "summary": "Handle Stripe webhooks",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Stripe webhook payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook signature or payload"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}